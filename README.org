#+TITLE: Ranking of average treatment effects with generalized random forests for time-to-event outcomes: The empirical studies
#+Author: Helene Charlotti Wiese Rytgaard & Thomas Alexander Gerds

#+BEGIN_SRC R  :results silent  :exports none  :session *R* :cache no
try(setwd("~/research/SoftWare/grfCausalSearch/"),silent=TRUE)
#+END_SRC

* Introduction

Here we provide the R-codes that (re)produce the simulation study
results presented in our manuscript.

* Preparation

Clone the github repository, then load (and install first if
necessary) the following packages:

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
library(targets)
library(tarchetypes)
library(Publish)
library(data.table)
library(ggplot2)
library(parallel)
library(ranger)
library(prodlim)
library(grf)
library(survival)
library(cowplot)
#+END_SRC

Source the R-functions

#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes  
# load all functions
for(f in list.files("R",".R$",full.names=TRUE)){source(f)}
for(f in list.files("functions",".R$",full.names=TRUE)){source(f)}
source("./setting/simulation_targets.R")
#+END_SRC

* Demo

** Simulate data

The function =simulateData= simulates 3 latent event times, one for
each of 2 causes, and one for the right censoring time. The minimum of
the three latent times is given in the column =time=. The event type
is in the column =event= where value =0= codes for right censored, =1=
event of cause 1 and =2= event of cause 2. The distributions of the
latent times depends on five discrete (varying prevalence) and two
continuous covariates and ten binary treatment variables (varying
prevalence) as defined by the current setting.

#+BEGIN_SRC R  :results output example  :exports both  :session *R* :cache yes  
fixed
#+END_SRC

#+RESULTS[(2022-06-23 08:53:26) 5c4139cacd7e0e312bba25817204e8572ef8bf14]:
#+begin_example
$event.times
[1] "T1" "T2"

$treatments
 A1  A2  A3  A4  A5  A6  A7  A8  A9 A10 
0.4 0.3 0.3 0.4 0.5 0.2 0.7 0.8 0.9 0.1 

$binary.covariates
 X1  X2  X3  X4  X5 
0.1 0.2 0.3 0.4 0.5 

$normal.covariates
[1] "X6" "X7"

$quadratic.covariates
[1] "X6"
#+end_example

In addition to the fixed parameters our simulation design also has
varying parameter values. They can be inspected by looking at the
following object:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output raw drawer  :exports code  :session *R* :cache yes  
tar_read(VARYING) 
#+END_SRC

The dependence of all the variables is defined by a set of
formulae. Here the values are hazard ratios and odds ratios specified
on the logarithmic scale.
#+BEGIN_SRC R  :results output example  :exports both  :session *R* :cache yes  
formula1
#+END_SRC

#+RESULTS[(2022-06-23 08:54:41) 7c78430e442837b5fe50d61112cf7fde919a362a]:
#+begin_example
[[1]]
T1 ~ f(A4, 0.3) + f(A5, 0.7) + f(X1, 1) + f(X2, 0.3) + f(X6, 
    -0.5)

[[2]]
T2 ~ f(A5, -0.3) + f(X1, -0.1) + f(X2, 0.6) + f(X6, 0.1)

[[3]]
C ~ f(A1, 0)

[[4]]
A1 ~ f(X1, -1) + f(X6, 0.7) + f(A7, 0.2)
#+end_example

Furthermore, the effect of the treatments =A1= and =A2= on the latent
event times are controlled by hazard ratio parameters denoted =A1_T1=,
=A1_T2=, =A2_T1=, =A2_T2=.  Finally, the baseline hazard rate of the
censoring distribution is controlled by the parameter
=scale.censored=.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output example  :exports code  :session *R* :cache yes
set <- fixed
set$formula.list <- formula1
set.seed(9)
simulated_data <- simulateData(setting = set,
                     A1_T1 = 1.25,
                     A1_T2 = 1.25,
                     A2_T1 = 1,
                     A2_T2 = .8,
                     n = 2000,
                     scale.censored = 1/40,
                     keep.latent = FALSE)
simulated_data
#+END_SRC

** True value of the average treatment effects

We approximate the true values of the crude and net average treatment
effects at the time horizon as well as the percentage of censored
*before* the time horizon. We do this by simulating large datasets in
the setting where the treatments =A1= and =A2= are randomized. To
minimize Monte-Carlo error, we repeat this =10= times and report
averages.

#+BEGIN_SRC R  :results output example  :exports both  :session *R* :cache yes
set.seed(7)
tt=theTruth(setting = set,
         A1_T1 = 1.25,
         A1_T2 = 1.25,
         A2_T1 = 1,
         A2_T2 = .8,
         B=10, # number of repetitions
         horizon=5,
         scale.censored=1/40,
         n = 100000)
tt[cause==1]
#+END_SRC

#+RESULTS[(2022-06-23 09:48:15) fa0bed239c1fb2011b68ba3dbf560b9ed4f53fbf]:
:    intervene cause net scale.censored      ate censored.tau
: 1:        A1     1   1          0.025 0.059364        33.79
: 2:        A2     1   1          0.025 0.000180        33.79
: 3:        A1     1   0          0.025 0.045185        33.79
: 4:        A2     1   0          0.025 0.007840        33.79

The crude effect of =A1= is larger than the net effect because =A1=
increases the hazard rate of events of cause 2 and hence subjects are
shorter time at risk for cause 1.

** Estimator

*** Single treatment: crude
#+BEGIN_SRC R  :results output example  :exports both  :session *R* :cache yes  
set.seed(4)
x <- causalhunter(formula=Hist(time,event)~intervene(A1)+A2+A3+A4+A5+A6+A7+A8+A9+A10+X1+X2+X3+X4+X5+X6+X7,
               method = "causal_forest",
               weighter="ranger",
               args.weight = list(num.trees = 100,alpha = 0.05,mtry = 17), # arguments for weighter
               fit.separate = TRUE, # fit G and G2 separately
               num.trees=100, # number of trees for the function causal_forest
               CR.as.censoring = 0, # 0 = crude effects, 1 = net effects
               data=simulated_data,
               times=5, # time horizon
               formula.weight = Hist(time,event)~A1+A2+A3+A4+A5+A6+A7+A8+A9+A10+X1+X2+X3+X4+X5+X6+X7)
set(x,j="true.ate",value=tt[intervene=="A1"&net==0&cause==1,ate])
x
#+END_SRC

#+RESULTS[(2022-06-23 09:48:33) fc85525cf45dd58040b89840ad0338a7534b29db]:
:    time intervene        ate         se       lower      upper true.ate
: 1:    5        A1 0.03334221 0.03129835 -0.02800143 0.09468585 0.045185

*** Single treatment: net
#+BEGIN_SRC R  :results output example  :exports both  :session *R* :cache yes  
set.seed(4)
y <- causalhunter(formula=Hist(time,event)~intervene(A1)+A2+A3+A4+A5+A6+A7+A8+A9+A10+X1+X2+X3+X4+X5+X6+X7,
                  method = "causal_forest",
                  weighter="ranger",
                  args.weight = list(num.trees = 100,alpha = 0.05,mtry = 17), # arguments for weighter
                  fit.separate = TRUE, # fit G and G2 separately
                  num.trees=100, # number of trees for the function causal_forest
                  CR.as.censoring = 1, # 0 = crude effects, 1 = net effects
                  data=simulated_data,
                  times=5, # time horizon 
                  formula.weight = Hist(time,event)~A1+A2+A3+A4+A5+A6+A7+A8+A9+A10+X1+X2+X3+X4+X5+X6+X7)
set(y,j="true.ate",value=tt[intervene=="A1"&net==1&cause==1,ate])
y
#+END_SRC

#+RESULTS[(2022-06-23 09:48:44) 6a9de4efbc17d39712787b7de97fc28bf7891257]:
:    time intervene        ate         se       lower      upper true.ate
: 1:    5        A1 0.02160464 0.03579717 -0.04855652 0.09176581 0.059364

* Empirical studies

Our empirical studies are organized with the help of the magnificent
package =targets=, see https://books.ropensci.org/targets/. The
simulation settings are defined in the file
[[./setting/simulation_targets.R]] and run by the master file
[[./_targets.R]]. The results are saved and can be assessed by the
function =tar_read= as is shown below.

** Performance results

*** Crude effects
#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
x=tar_read(RESULTS)
x_crude = x[theme=="crude_effect"&A1_T2==0.8]
tabel_crude=x_crude[,.(method,n=n,"P(C<5)"=round(censored.tau,1),A1_T1,A1_T2,bias=round(100*bias,2),SD=round(100*sd,2),SE=round(100*mean.se,2),coverage=round(100*coverage,1))]
tabel_crude
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes  
Publish::org(tabel_crude)
#+END_SRC

#+RESULTS[(2022-06-10 07:02:04) a66a92cde7e5c97f900778c0bb2514636450ee11]:
:results:
| method        |    n | P(C<5) | A1_T1 | A1_T2 |  bias |   SD |   SE | coverage |
|---------------+------+--------+-------+-------+-------+------+------+----------|
| causal_forest |  500 |   17.6 |  1.25 |   0.8 | -2.07 | 6.05 | 6.07 |     92.9 |
| causal_forest | 1000 |   17.6 |  1.25 |   0.8 | -1.74 | 4.37 | 4.35 |     92.3 |
| causal_forest | 2000 |   17.6 |  1.25 |   0.8 | -0.89 | 3.09 | 3.12 |     93.8 |
| causal_forest | 5000 |   17.6 |  1.25 |   0.8 | -0.45 | 1.97 | 2.00 |     94.6 |
:end:

*** Net effects
#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
x=tar_read(RESULTS)
x_net = x[theme=="net_effect" & net==1]
tabel_net=x_net[,.(method,"P(C<5)"=round(censored.tau,1),A1_T1,A1_T2,bias=round(100*bias,2),SD=round(100*sd,2),SE=round(100*mean.se,2),coverage=round(100*coverage,1))]
tabel_net
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes  
Publish::org(tabel_net)
#+END_SRC

#+RESULTS[(2022-06-10 17:28:23) 9b5ef84a8772ecb03367cf42518f1252962eeed8]:
:results:
| method        | P(C<5) | A1_T1 | A1_T2 | bias |   SD |   SE | coverage |
|---------------+--------+-------+-------+------+------+------+----------|
| causal_forest |   17.6 |  0.80 |   0.8 | 0.66 | 2.06 | 2.24 |     94.5 |
| causal_forest |   17.6 |  1.00 |   0.8 | 0.70 | 2.23 | 2.31 |     94.9 |
| causal_forest |   17.6 |  1.25 |   0.8 | 0.54 | 2.30 | 2.37 |     95.0 |
:end:

**** boxplots: Crude and net effects

#+BEGIN_SRC R :results file graphics :file ./output/crude-net-effect-boxplots.png :exports none :session *R* :cache yes :width 500 :height 500
b=tar_read(BOXPLOTS)   
cowplot::plot_grid(b[[1]]+theme_bw()+ggtitle("Crude effects")+guides(color=FALSE)+theme(plot.title=element_text(size=16, hjust=0.5),
                                                                                        strip.text = element_text(size=12),
                                                                                        strip.background = element_blank()),
                   b[[2]]+theme_bw()+ggtitle("Net effects")+guides(color=FALSE)+theme(plot.title=element_text(size=16, hjust=0.5),
                                                                                      strip.text = element_text(size=12),
                                                                                      strip.background = element_blank()),ncol = 1) 
#+END_SRC

#+RESULTS[(2022-07-12 13:02:03) 8a5755c49b8ff5ac5cc27e311903975fd82a3e74]:
[[file:./output/crude-net-effect-boxplots.png]]

**** boxplots: Sample size

#+BEGIN_SRC R :results file graphics :file ./output/sample-size-boxplots.png :exports none :session *R* :cache yes 
  b=tar_read(BOXPLOTS)  
  b[[5]]+theme_bw()+theme(axis.text=element_text(size=15),axis.title=element_text(size=18),legend.position="none")   
#+END_SRC

#+RESULTS[(2022-07-12 13:04:53) 4ba502d96cd762f906328d70cd08d7bea0936a4b]:
[[file:./output/sample-size-boxplots.png]]


**** coverage:

#+BEGIN_SRC R :results file graphics :file ./output/coverage.png :exports none :session *R* :cache yes :width 500 :height 250
  r=tar_read(RESULTS)    
  ## R=r[formula=="formula1"&horizon==5&theme!="sample_size"]  
  R=r[net==0]
  R[,A1_T1:=factor(A1_T1,levels=c("0.8","1","1.25"),labels=c("0.8","1","1.25"))]
  R[,A1_T2:=factor(A1_T2,levels=c("0.8","1","1.25"),labels=c("0.8","1","1.25"))] 
  R[,A2_T1:=factor(A2_T1,levels=c("1"),labels=c("1"))]
  R[,A2_T2:=factor(A2_T2,levels=c("0.2","0.8","1","1.25","2"),labels=c("0.2","0.8","1","1.25","2"))]
  R[,n:=factor(n,levels=c("500","1000","2000","5000"),labels=c("500","1000","2000","5000"))]
  R[,censored.tau:=factor(censored.tau,levels=c("0","17.622","26.522"),labels=c("0","18%","27%"))]
  R=R[theme!="weighter",.(repetitions,theme,censored.tau,formula,n,A1_T1,A1_T2,horizon,bias, mean.se, coverage)]
  R1a=R[theme=="censoring"&formula=="formula1"] 
  R1b=R[theme=="censoring"&formula=="formula_cens"]
  # coverage independent censoring varying censored procentage at time horizon
  g1a=ggplot(R1a,aes(x=n,y=coverage,group=censored.tau,linetype=censored.tau))+theme_bw()+guides(linetype=guide_legend(title="censoring (%)"))+geom_line()+geom_point()+ylim(c(.9,1))+xlab("Sample size")+ylab("Coverage")
  # coverage dependent censoring varying censored procentage at time horizon
  g1b=ggplot(R1b,aes(x=n,y=coverage,group=censored.tau,linetype=censored.tau))+theme_bw()+guides(linetype=guide_legend(title="censoring (%)"))+geom_line()+geom_point()+ylim(c(.9,1))+xlab("Sample size")+ylab("Coverage")
  # bias independent censoring varying censored procentage at time horizon
  b1a=ggplot(R1a,aes(x=n,y=bias,group=censored.tau,linetype=censored.tau))+theme_bw()+guides(linetype=guide_legend(title="censoring (%)"))+geom_line()+geom_point()+ylim(c(-.025,.025))+xlab("Sample size")+ylab("Bias")
  # bias dependent censoring varying censored procentage at time horizon
  b1b=ggplot(R1b,aes(x=n,y=bias,group=censored.tau,linetype=censored.tau))+theme_bw()+guides(linetype=guide_legend(title="censoring (%)"))+geom_line()+geom_point()+ylim(c(-.025,.025))+xlab("Sample size")+ylab("Bias")
  cowplot::plot_grid(g1a,g1b,b1a,b1b,ncol=2)
#+END_SRC

#+RESULTS[(2022-07-12 13:27:54) f86b82c1c918140586c01d7de44f81df29d78923]:
[[file:./output/coverage.png]]

#+name: fig:1
#+ATTR_LATEX: :width 1.2\textwidth
#+CAPTION:


*** Censoring percentage 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes  
x=tar_read(RESULTS)
x_censoring = x[theme=="censoring" ]
setkey(x_censoring,formula,censored.tau)
tabel_censoring=x_censoring[,.(method,formula,"P(C<3)"=round(censored.tau,1),A1_T1,A1_T2,bias=round(100*bias,2),SD=round(100*sd,2),SE=round(100*mean.se,2),coverage=round(100*coverage,1))]
tabel_censoring
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes  
org(tabel_censoring)
#+END_SRC

#+RESULTS[(2022-06-10 17:27:22) 4a675d5b8a3c93eabe0fc69383c7dc0fea14918c]:
:results:
| method        | formula      | P(C<3) | A1_T1 | A1_T2 |  bias |   SD |   SE | coverage |
|---------------+--------------+--------+-------+-------+-------+------+------+----------|
| causal_forest | formula1     |    0.0 |  1.25 |     1 | -0.39 | 1.31 | 1.32 |     93.3 |
| causal_forest | formula1     |   17.6 |  1.25 |     1 | -0.10 | 1.48 | 1.49 |     95.3 |
| causal_forest | formula1     |   26.5 |  1.25 |     1 | -0.28 | 1.49 | 1.55 |     95.9 |
| causal_forest | formula_cens |    0.0 |  1.25 |     1 | -0.33 | 1.31 | 1.32 |     94.3 |
| causal_forest | formula_cens |   17.6 |  1.25 |     1 | -0.30 | 1.48 | 1.48 |     94.3 |
| causal_forest | formula_cens |   26.5 |  1.25 |     1 | -0.38 | 1.54 | 1.54 |     93.8 |
:end:

*** Misspecified parametric models

#+BEGIN_SRC R :results file graphics :file ./output/misspecified-parametric-boxplots.png :exports none :session *R* :cache yes 
b=tar_read(BOXPLOTS)
b[[4]]+theme_bw()+theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
                        strip.text = element_text(size=16),
                        strip.background = element_blank())
#+END_SRC

#+RESULTS[(2022-07-12 13:13:22) c4721cdf4772394857b3b1c41db06f6706f58aef]:
[[file:./output/misspecified-parametric-boxplots.png]]

*** Ranking performance

#+BEGIN_SRC R :results file graphics :file ./output/ranking-performance.png :exports none :session *R* :cache yes
    ran <- tar_read(RANKING)[A2_T2%in%c(0.2,1,2)&scale.censored==0.025]
    ran[, A2_T2_text:=paste0("A2 on T2: ", A2_T2)] 
    ran[,net:=factor(net,levels=c(0,1),labels=c("Crude","Net"))]
    gnet=ggplot(ran[net=="Net"&intervene%in%c("A1","A2","A3")&rank==1],aes(x=n,y=mean,linetype=intervene,group=intervene))+geom_line()+geom_point()+facet_grid(~A2_T2_text)+ylim(c(0,1))+ylab("Frequency of rank 1")
    gcrude=ggplot(ran[net=="Crude"&intervene%in%c("A1","A2","A3")&rank==1],aes(x=n,y=mean,linetype=intervene,group=intervene))+geom_line()+geom_point()+
      facet_grid(~A2_T2_text)+ylim(c(0,1))+ylab("Frequency of rank 1")
    cowplot::plot_grid(gcrude+ggtitle("Crude effects")+theme_bw()+
  theme(axis.text=element_text(size=12,angle=45,hjust=1),axis.title=element_text(size=12),legend.position="none",
			    strip.text = element_text(size=12),
			    plot.title=element_text(size=16, hjust=0.5),
			    strip.background = element_blank()),gnet+ggtitle("Net effects")+theme_bw()+theme(axis.text=element_text(size=12,angle=45,hjust=1),axis.title=element_text(size=12),legend.position="none",
			    strip.text = element_text(size=12),
			  plot.title=element_text(size=16, hjust=0.5),
			    strip.background = element_blank()),ncol = 1)
#+END_SRC

#+RESULTS[(2022-07-12 13:25:49) 6e489414db01cb8fed2aa32c0665c15898bd201e]:
[[file:./output/ranking-performance.png]]


